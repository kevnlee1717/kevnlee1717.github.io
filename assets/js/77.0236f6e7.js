(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{216:function(t,v,a){"use strict";a.r(v);var s=a(28),_=Object(s.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"汇编"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#汇编"}},[t._v("#")]),t._v(" 汇编")]),t._v(" "),a("h2",{attrs:{id:"c中的参数引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c中的参数引用"}},[t._v("#")]),t._v(" c中的参数引用")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("参数 从右到左依次入栈")])]),t._v(" "),a("li",[a("p",[t._v("当看到一个变量定义的时候， 数据类型只是说明在内存中占用了几个字节， char 1个字节， int 4个字节， short 2个字节。 一个内存地址都是以一个字节大小。换句话说即是步进的大小不同。 如果进行内存寻址的时候，要说明需要寻址的大小.")])]),t._v(" "),a("li",[a("p",[t._v("内存寻址 比如 [xx] 在对这个地址寻址的时候如果不做 word ptr [xx] 或者 dword ptr [xx] 声明，那么默认就是 byte ptr [xx], 就是一个字节的。 mov [xx], 0x55667788 ， byte ptr 的时候只存了 88， word ptr只存了 7788， dword 是55667788。")])]),t._v(" "),a("li",[a("p",[t._v("char* a = xx;  char *说明a里面存的是地址，而不是平常的数据类型而已， a 跟其他变量声明一样，只是一个内存地址的别名, char 说明这个地址的步进是1 ，如果是int 步进是2.")]),t._v(" "),a("ul",[a("li",[t._v("char** a = '123'; 说明a(bp-2)存的值是一个地址ffdd，而(ffdd)里存的也是一个地址ffcc,最终(ffcc)里存的才是具体的数据 '123'的地址(ds:0194)。 所以*a 就解析a存的地址(ffdd),可以对(ffdd)里面的值进行修改先的值是ffcc，如果修改后就指向了其他地址， **a就是对(ffdd)里的值ffcc再进行寻址，(ffcc)里现在存的是(ds:0194)可以对最终的数据进行修改。")])])]),t._v(" "),a("li",[a("p",[t._v("进入函数后 bp = sp， bp处的值就是调用它的函数的bp值。 [bp+2]就是函数结束后的 ip")])]),t._v(" "),a("li",[a("p",[t._v("局部变量的存在 都是 push到栈里才得到它的地址空间，这个地址就是变量定义时候的名字的别名。")])]),t._v(" "),a("li",[a("p",[t._v("函数开始后对栈的使用，需要使用的寄存器都会先push起来， 是寄存器push在前还是局部变量开辟在前，顺序不确定？？")])])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// a的地址 = bp-2 = ffbc ， a的值= '123'的地址 0194")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// b的地址 = bp-4 = ffba ， a的值= 'abc'的地址 0198")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//变量名称a,b在内存中就是一个地址，如果是全局变量就是data段中的地址，局部变量就是栈中的一个地址")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a,b的值是地址，那它就是一个指针，*a即[a]通过存在a地址中的地址去获取真实的数据")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//char** a,a的值是一个地址，*a即[a]获取到第2个地址，**a即[[a]]获取到真实数据，以此类推")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//a,b的值就是int,char..等类型数据的值，那么a,b地址里存的就是数据，可以直接读写")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("notchanged")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//当开始调用函数的时候，先push两个参数a和b的值进栈，如果main函数中的a,b地址是当前bp")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从a(bp-2)处的值 （0194地址) 的字符串打印出来")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("printf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'%c'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 从b(bp-4)处的值 （0198地址) 的字符串打印出来")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("noswap")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n  \n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br")])]),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("swaps栈")]),t._v(" "),a("th",[t._v("内容")]),t._v(" "),a("th",[t._v("bp")]),t._v(" "),a("th",[t._v("sp")]),t._v(" "),a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("注释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd8")]),t._v(" "),a("td",[t._v("是否初始化？")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp（空出4个字节）")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("sub sp,04 栈中开辟两个字的空间，用来存储两个局部变量a，b，这里bp-2")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffdc")]),t._v(" "),a("td",[t._v("org_bp=ffe8")]),t._v(" "),a("td",[t._v("bp=ffdc")]),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("push bp, mov bp,sp 保存原来的bp，更新bp， 所以现在的bp值就是调用main函数的bp值。等main返回的时候可以恢复栈。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffde")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("刚刚进入main函数t")])])])]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"center"}},[t._v("noswap栈")]),t._v(" "),a("th",[t._v("内容")]),t._v(" "),a("th",[t._v("bp")]),t._v(" "),a("th",[t._v("sp")]),t._v(" "),a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("注释")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("x")]),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("接着用 【bp-2】的局部变量temp,对si,di进行了交换，printf的时候也直接使用了di，si。 所以在noswap函数内部产生了交换，但是在main函数里， 【bp-6】 （局部变量b）的值 与 【bp-8】（局部变量a）的值并没有改变。")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("mov si,[bp+04] 传入的a参数，根据bp+4,把main里局部变量a的值赋值给寄存器si，noswap函数对传入的参数，没有开辟新的栈或者内存地址，直接使用一个si寄存器，这样速度更快，在很多参数或者其他类型的是否会使用栈？")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}}),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td"),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("mov di,[bp+06] 传入的b参数，根据bp+6,把main里局部变量b的值赋值给寄存器di，noswap函数对传入的参数，没有开辟新的栈或者内存地址，直接使用一个di寄存器，这样速度更快，在很多参数或者其他类型的是否会使用栈？")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffca")]),t._v(" "),a("td",[t._v("198")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("push di 要使用到si 进行保存")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffcc")]),t._v(" "),a("td",[t._v("194")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("push si 要使用到si 进行保存")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffce")]),t._v(" "),a("td",[t._v("3346")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("sub sp, 02 对sp指针修改 保存这个3346是什么？？ 是局部变量temp 为什么初始化为3346？？？")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd0")]),t._v(" "),a("td",[t._v("org_bp=ffdc")]),t._v(" "),a("td",[t._v("bp")]),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("noswap")]),t._v(" "),a("td",[t._v("push bp , mov bp,sp 进入call第一步先保存bp，然后马上更新bp为当前sp，所以在一个被调用函数里当前bp里的值就是调用函数的bp地址。 bp+2 就是函数结束后的ip地址")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd2")]),t._v(" "),a("td",[t._v("ip=020A")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("call xxxx, 在main中的时候先 push ip, 执行了call指令，准备进入，call指令后的第一个IP是020a入栈，等call返回时候执行")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd4")]),t._v(" "),a("td",[t._v("si,194")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v('mov si,194 push si  为局部变量a 在栈中开辟地址给它，push si 就是在栈中存储局部变量a同时值为字符串"123"在data段中的地址0194，局部变量后面的先入栈194')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd6")]),t._v(" "),a("td",[t._v("di,198")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v('mov di,198 push di  为局部变量b 在栈中开辟地址给它，push di 就是在栈中存储局部变量b同时值为字符串"abc"在data段中的地址0198，局部变量后面的先入栈')])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffd8")]),t._v(" "),a("td",[t._v("di，xx")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("push di 保存好di,因为要修改di，main运行前的di值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffda")]),t._v(" "),a("td",[t._v("si，xx")]),t._v(" "),a("td"),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("push si 保存好si,因为要修改si，main运行前的si值")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"center"}},[t._v("ffdc")]),t._v(" "),a("td",[t._v("xx")]),t._v(" "),a("td",[t._v("bp=ffdc")]),t._v(" "),a("td",[t._v("sp")]),t._v(" "),a("td",[t._v("main")]),t._v(" "),a("td",[t._v("刚刚进入main")])])])]),t._v(" "),a("h2",{attrs:{id:"c与指针"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c与指针"}},[t._v("#")]),t._v(" c与指针")]),t._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[t._v("\nchar* addc "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" &a ;addc是字节型指针，偏移为1个字节")]),t._v("\nint* addi "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v("&a ;addi是字型指针，偏移为2个字节")]),t._v("\n\n(int*)addc ;把 char指针，解析位int 指针，偏移就以2个字节\n\n(char far*) addf "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 0x20001000 ;addf是一个字节型指针， 段地址2000 偏移为1000")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("(char*)0x2000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" '1' ;直接向这个地址 ds:[2000] 写入一个字节 61")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("(int*)0x2000")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" '1' ;直接向这个地址 ds:[2000] 写入一个字 61 00")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("_AX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 0x2000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("(int*)_AX")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" '1' ;设置好寄存器后，用寄存器设置地址 ds:[2000] 写入一个字 61 00")]),t._v("\n\n\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br")])]),a("h2",{attrs:{id:"c语言参数内存布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c语言参数内存布局"}},[t._v("#")]),t._v(" c语言参数内存布局")]),t._v(" "),a("p",[t._v("对于全局变量放在data段")]),t._v(" "),a("p",[t._v("所有的局部变量 都在栈中")]),t._v(" "),a("p",[t._v("main 函数里的变量也是局部变量，所以也都是 [bp-xx] 格式")]),t._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[t._v("\nmov word ptr [bp-xx], 0194 \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("; 局部变量指针， 把指针的值即字符串的地址 存入栈")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("; char * char_poniter = '12345'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("; char * char_poniter = 0x194(保存的实际上是ds段的偏移地址 ds:[194]) ")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("; char * 说明 char_pointer 存的是8位的地址，实际上是一个偏移地址如上")]),t._v("\n \nmov word ptr [bp-xx], 61  \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v(";局部变量直接把值存在栈中 int a = 0x61")]),t._v("\n\nmov wor ptr [xx], 62\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v(";全局变量存在data段中 b = 0x62 b定义在main外面为全局变量")]),t._v("\n\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("h2",{attrs:{id:"offset"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#offset"}},[t._v("#")]),t._v(" offset")]),t._v(" "),a("p",[t._v("计算代码段 标识符的偏移 比如 offset start 就为0")]),t._v(" "),a("h2",{attrs:{id:"jmp指令"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jmp指令"}},[t._v("#")]),t._v(" jmp指令")]),t._v(" "),a("p",[t._v("跳转指令是根据 跳转指令 的下一条指令 加上指令中的偏移来计算新的IP的地址")]),t._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[t._v("\nj1: mov 100h\n\njmp j1  ;eaxx xx是偏移量，在编译的时候计算出\n\nnop     ; nop的地址(nop shi jmp后的指令) + xx "),a("span",{pre:!0,attrs:{class:"token attr-value"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),t._v(" 新的IP ")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br")])]),a("ul",[a("li",[a("p",[t._v("jmp 一般都是短跳转 -128 到 127 地址之间进行跳转 jmp short xx")]),t._v(" "),a("p",[t._v("有条件的跳转都是短跳转 jcxz")])]),t._v(" "),a("li",[a("p",[t._v("jmp near xx 是远跳转 在 -3xxxx 到 3xxxx之间跳转")])]),t._v(" "),a("li",[a("p",[t._v("jmp dword/word ds:[0] 是word的时候 内存地址是ip， 是dword的时候 ds:[0]是ip ds:[2]是cs")]),t._v(" "),a("p",[t._v("跳转可以从内存中读取要跳转的地址，可以把要跳转的地址连续的写在一段内存中，方便跳转。")])])]),t._v(" "),a("h2",{attrs:{id:"程序在内存中的布局"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#程序在内存中的布局"}},[t._v("#")]),t._v(" 程序在内存中的布局")]),t._v(" "),a("div",{staticClass:"language-ini line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-ini"}},[a("code",[t._v("data segment    ;这些都是伪指令，方便用 mov ax,data 这样把数据段读进来\n    .....       ;程序在内存中从这里开始，存储这里的数据开始\ndata ends\n\nstack segment stack\n    ....\nstack ends\n\ncode segment\n    ....        \n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("    ;这里如果有start伪指令，就cs默认从这里开始，不然就从data segment 那里的那个地址开始")]),t._v("\ncode ends\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br")])]),a("h2",{attrs:{id:"_20根地址线"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_20根地址线"}},[t._v("#")]),t._v(" 20根地址线")]),t._v(" "),a("p",[t._v("8086的寄存器都是16位的，但是地址线却有20条（位），所以用段地址左偏移一位加上偏移地址来表示20位的物理地址。 这样的设计应该是为了引入段地址的概念，跟实际的用户程序结合起来，每个程序都有自己的代码段，数据段，栈。 用段地址来区分，同时进行安全上的管理。")]),t._v(" "),a("h2",{attrs:{id:"段寄存器的设计和寻址方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#段寄存器的设计和寻址方式"}},[t._v("#")]),t._v(" 段寄存器的设计和寻址方式")]),t._v(" "),a("p",[t._v("因为程序不可以对内存向任意地址进行读写，这样会导致数据损坏操作系统崩溃，所以用户程序都由操作系统来运行，操作系统对内存空间进行划分，内核空间和用户空间。不同的用户程序不会产生干扰，不会随意的对内核空间进行读写。")])])}),[],!1,null,null,null);v.default=_.exports}}]);